"""
Django settings for DJANGO project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from socket import gethostname, gethostbyname
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

SECRET_KEY = os.environ.get('SECRET_KEY', 'changeme')
DEBUG = os.environ.get('DEBUG', 'False')

# CONFIGURE: allowed hosts w/ environment variables
ALLOWED_HOSTS = ['*']
# ALLOWED_HOSTS.extend(
#     filter(
#         None,
#         os.environ.get('ALLOWED_HOSTS', '').split(','),
#     )
# )
if os.environ.get('AWS_EXECUTION_ENV'):
    ALLOWED_HOSTS.append(gethostbyname(gethostname()))

# Application definition

INSTALLED_APPS = [
    # Apps
    'APP_users.apps.AppUsersConfig',
    'APP_api.apps.AppApiConfig',
    'APP_files.apps.AppFilesConfig',

    # Django Rest Framework
    'rest_framework',
    'rest_framework.authtoken',

    # Helpers
    'corsheaders',
    
    # Pre Installed
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',

    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.

    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

# Extend Django User
# AUTH_USER_MODEL = 'APP_users.User'
AUTH_USER_MODEL = 'APP_users.User'

ROOT_URLCONF = 'DJANGO.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'DJANGO.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': config('DB_NAME'),           # postgres DB name
#         'USER': config('DB_USER'),           # ^^ owner
#         'PASSWORD': config('DB_PASSWORD'),   # ^^'s password
#         'HOST': 'db',
#         'PORT': '5432',
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'HOST': os.environ.get('DB_HOST'),
        'NAME': os.environ.get('DB_NAME'),           # postgres DB name
        'USER': os.environ.get('DB_USER'),           # ^^ owner
        'PASSWORD': os.environ.get('DB_PASSWORD'),   # ^^'s password
        'PORT': '5432',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# STATIC FILES
## static (JS / CSS) / media (user uploads)
## prefix used when GENERATING files -> how files are SERVED
STATIC_URL = '/static/static/'
MEDIA_URL = '/static/media/'

## where files get STORED on the file system ðŸ‘‰ this is where 'collect static' command will dump the files
## ðŸ‘€ /app/ is used here under the assumption that it will be paired with an NGINX proxy
## ^ the default APP_HOST is `app` -> make name of Django Service in Dockerfile `app` to be consistant
STATIC_ROOT = '/vol/app/static'
MEDIA_ROOT = '/vol/app/media'

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/



# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
